Arrays in js:
-------------
arrays are datastructers, it is used in stores and managing the data(same type and different type).
array datatype is always object.

create an array:
----------------
using literal notation like taking a variable and assign that variable to array.
var user=[ elements] //

var user=["ganesh","suresh","mainkanta"];
console.log(user);

how to retrieve the data in arrays
----------------------------------
in array using index value to retrieve the elements.
index elements always starts with '0'.

var no=[101,102,103]
         0   1   2
elements are seperated with the comma operator(,).

how to find the length of the array
-----------------------------------
using length keyword the length keyword is used to find the length of an array.
var numberOfElements=<arrayname>.length;

//lenght of the array
let cric=["raina","dhoni","sachin","kohli"];
var lengthOfArray=cric.length;
console.log("length of the array:",lengthOfArray);

javacsript is providing predefinrd functions perform action on array:
--------------------------------------------------------------------

1, Add new element in the element in the array:
----------------------------------------------
 1,push()//it is add one or more elements in the exixting array at end of an array.

  //push():
  ----------
  let cricket=["sachin","virat","dhoni","yuvaraj"];
  var newValue=cricket.push("raina");
  console.log("push method is adding one or two element in end of the array",newValue);
 
 2,unshift()// it is  add one or more elements int the existing array at starting of the array.
  //unshift():
  -----------
  let cricket=["sachin","virat","dhoni"];
  var adding=cricket.unshift("raina");
  console.log(adding);

2, delete the element in the exisiting array:
---------------------------------------------
  1,pop()//it is delete the element at the end of an array.
    //pop():
    --------
     var cricket=["raina","sachin","kohli"];
     var delete=cricket.pop();
     console.log(delete);

  2,shift()//it is delete the element at starting of an array.
    //shift():
    --------
    var cricket=["raian","sachin","kohli"];
   var name= cricket.shift();
    console.log(name);
3, given element present in the array or not:
   ----------------------------------------- 
  includes()//it is used to check the element present in the array.

  //includes():
  -------------
  var cricket=["raian","sachin","kohli"];
  var name=cricket.includes("sachin");
  console.log(name);
4,find position of the element:
-------------------------------
indexOf()//it is used to find position of the element in the array.
//indexOf():
-------------
var user=["ganesh","mani","suresh"];
var name=user.indexOf("mani");
console.log(name);

5,using slice method :
--------------------
 slice method is using to array instances of a shallow copy of portion of an array into new new array.
 it is used to access part of an array.

 //slice();
 ----------
 var no =[101,102,103,104,105];
 var sliceNo=no.slice(1,0);
 console.log(sliceNo);

 6,using splice method:
 ----------------------
 splice method is used to add, retrieve and replace data.

 //splice method:
 ---------------
 //using splice method
  var no=[101,103,104,105,106];
  //adding element
  no.splice(1,0,102);
  console.log(no);
  //deleting element
  var delNo= no.splice(1,1);
  console.log(delNo);
  console.log(no);
  //replace the element 
  no.splice(1,1,202);
  console.log(no);

  how to access the elements in the array
  ---------------------------------------
  access the elements in the array using [] square brackets.
  //accessing elements in th array
    var use=[101,102,103,104,105];
    console.log(use[2]);
7,using forEach() method:
-------------------------
it is used to get access of each and every element of the array.
syntax:
------
<arrayName>.forEach(function(element,index)
{

})

//forEach():
-----------
//using forEach method
var users=["yash","siddharth","yukti","sameer","ziya"];
var user=users.forEach(function (item,index){
    console.log(index+1,item+" naidu");
    });
8, using map method:
--------------------
 it is used to access each element of the array and do something on it.
 it is used to return the result of the action in the new array.
  syntax:
  -------
  var name= <arrayname>.map((element)=>{
    return element;
 
  })
  
  //using map method:
  -------------------
var friend=["ganesh","prasad","nani","subbu"];
var bestFriend=friend.map((friends,index)=>{
  return {friends,index}; 
});
console.log(bestFriend);

//how to find length of an element
----------------------------------
In javascript to find the lenght of an array using length method.
syntax:
------
<arrayName>.lenght;

//using length method
---------------------
var ids = [100, 300, 400, 500, 600, 8, 9, 76, 23, 43];

var numberOfElements = ids.length;
console.log(numberOfElements);

9, using filter method:
---------------------
In javascript the filter method is using create a new array that all elements pass the test implemented provided function.
syntax:
-------
<arrayName>.filter();

//Example of using filter method:
var students=[
  {name:'ganesh',grade:70},
  {name:'mani',grade:65},
  {name:'prasad',grade:75},
  {name:'suresh',grade:80},
  {name:'nani',grade:85},
  {name:'subbu',grade:90}
];
var meritStudents=students.filter((student)=>
{
  return student.grade>75;
});
console.log(meritStudents);

10,lastIndexOf()
---------------
In javascript lastIndexOf is used for finding the given element last in the array.
syntax:
------
<arrayname>.lastIndexOf(element);
example of lastIndexOf method:
------------------------------
var arr = [10, 20, 40, 10, 50, 10, 90];

//find the index number of element 10

var indexNumber = arr.lastIndexOf(10); // 0 or 4

console.log(indexNumber); 

11, flat():
-----------
In javascript using flat method creates a new array with all sub arry element concatenated into it 
recursively up to the specified length.
syntax:
-------
<arrayName>.falt();
<arrayName>.falt(depth);
<arrayName>.falt(Infinity);

//using flat method
  var ar=[0,1,[2,[3,[4,5]]]];
  var flatMethod=ar.flat(Infinity);
  // console.log(ar);
  console.log(flatMethod);

 



